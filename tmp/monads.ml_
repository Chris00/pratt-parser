
module type MONAD = sig
  type 'a t
  val bind : 'a t -> ('a -> 'b t) -> 'b t
  val return : 'a -> 'a t
  module type
end


module type STATE = sig
   type t
   val empty : t
end


module type STATE_MONAD = functor(State : STATE) -> sig
  include MONAD
  val access : 'a t -> 'a
  val put : State.t -> unit t
  val get : State.t t
end


module StateMonad : STATE_MONAD = functor(State : STATE) -> struct
  type state = State.t
  type 'a t = state -> ('a * state)
  
  let bind m f = fun s ->
    match m s with 
    | (x, s') -> f x s'

  let return a = fun s -> (a, s)

  let access m =
     match m State.empty with
       | (x, s) -> x

  let put s = fun _ -> ((), s)

  let get = fun s -> (s, s)
end



module IntStateMonad = StateMonad (struct
  type t = int
  let empty = 0
end)


let (>>=) = IntStateMonad.bind

let () =
  let open IntStateMonad in
  let x = return 1 in
  let y = x >>= (fun i -> return (i + 1)) in
    print_endline (string_of_int (access y))
